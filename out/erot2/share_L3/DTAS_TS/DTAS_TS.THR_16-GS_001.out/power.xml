<?xml version="1.0" ?>
<!-- McPAT interface-->
<component id="root" name="root">
	<component id="system" name="system">
		<!--McPAT will skip the components if number is set to 0 -->
		<param name="number_of_cores" value="16"/>
		<param name="number_of_L1Directories" value="0"/>
		<param name="number_of_L2Directories" value="0"/>
		<param name="number_of_L2s" value="16"/> <!-- This number means how many L2 clusters in each cluster there can be multiple banks/ports -->
		<param name="Private_L2" value ="1"/>
		<param name="number_of_L3s" value="4"/> <!-- This number means how many L3 clusters -->
		<param name="number_of_NoCs" value="1"/>
		<param name="homogeneous_cores" value="0"/><!--1 means homo -->
		<param name="homogeneous_L2s" value="0"/>
		<param name="homogeneous_L1Directories" value="0"/>
		<param name="homogeneous_L2Directories" value="0"/>
		<param name="homogeneous_L3s" value="0"/>
		<param name="homogeneous_ccs" value="1"/><!--cache coherece hardware -->
		<param name="homogeneous_NoCs" value="1"/>
		<param name="core_tech_node" value="45"/><!-- nm -->
		<param name="target_core_clockrate" value='2660'/><!--MHz -->
		<param name="temperature" value="330"/> <!-- Kelvin -->
		<param name="number_cache_levels" value="3"/>
		<param name="interconnect_projection_type" value="0"/><!--0: agressive wire technology; 1: conservative wire technology -->
		<param name="device_type" value="0"/><!--0: HP(High Performance Type); 1: LSTP(Low standby power) 2: LOP (Low Operating Power)  -->
		<param name="longer_channel_device" value="1"/><!-- 0 no use; 1 use when approperiate -->
		<param name="power_gating" value="1"/><!-- 0 not enabled; 1 enabled -->
		<param name="machine_bits" value="64"/>
		<param name="virtual_address_width" value="64"/>
		<param name="physical_address_width" value="52"/>
		<param name="virtual_memory_page_size" value="4096"/>
		<stat name="total_cycles" value="1371877"/>
		<stat name="idle_cycles" value="0"/>
		<stat name="busy_cycles"  value="1371877"/>
			<!--This page size(B) is complete different from the page size in Main memo secction. this page size is the size of 
			virtual memory from OS/Archi perspective; the page size in Main memo secction is the actuall physical line in a DRAM bank  -->
		<!-- *********************** cores ******************* -->
		<component id="system.core0" name="core0">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="231677"/>
			<stat name="int_instructions" value="184534"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="44143"/>
			<stat name="branch_mispredictions" value="120"/>
			<stat name="load_instructions" value="90272"/>
			<stat name="store_instructions" value="52140"/>
			<stat name="committed_instructions" value="231677"/>
			<stat name="committed_int_instructions" value="184534"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="451687"/>
			<stat name="busy_cycles"  value="920189"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="274890"/>
			<stat name="ROB_writes" value="274890"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="463354"/>
			<stat name="rename_writes" value="231677"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="231677"/>
			<stat name="inst_window_writes" value="231677"/>
			<stat name="inst_window_wakeup_accesses" value="463354"/>
			<stat name="fp_inst_window_reads" value="115838"/>
			<stat name="fp_inst_window_writes" value="115838"/>
			<stat name="fp_inst_window_wakeup_accesses" value="231677"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="347515"/>
			<stat name="float_regfile_reads" value="57919"/>
			<stat name="int_regfile_writes" value="173757"/>
			<stat name="float_regfile_writes" value="28959"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="11583"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="227747"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="227747"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.168876"/>
			<stat name="LSU_duty_cycle" value="0.103808"/>
			<stat name="MemManU_I_duty_cycle" value="0.168876"/>
			<stat name="MemManU_D_duty_cycle" value="0.103808"/>
			<stat name="ALU_duty_cycle" value="0.001736"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001736"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core0.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core0.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13018"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core0.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13018"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core0.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="142412"/>
				<stat name="total_misses" value="10434"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core0.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="90272"/>
				<stat name="write_accesses" value="52140"/>
				<stat name="read_misses" value="8296"/>
				<stat name="write_misses" value="2138"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core0.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="44143"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core1" name="core1">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="256570"/>
			<stat name="int_instructions" value="204449"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="49121"/>
			<stat name="branch_mispredictions" value="118"/>
			<stat name="load_instructions" value="100232"/>
			<stat name="store_instructions" value="57120"/>
			<stat name="committed_instructions" value="256570"/>
			<stat name="committed_int_instructions" value="204449"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="366677"/>
			<stat name="busy_cycles"  value="1005199"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="304748"/>
			<stat name="ROB_writes" value="304748"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="513140"/>
			<stat name="rename_writes" value="256570"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="256570"/>
			<stat name="inst_window_writes" value="256570"/>
			<stat name="inst_window_wakeup_accesses" value="513140"/>
			<stat name="fp_inst_window_reads" value="128285"/>
			<stat name="fp_inst_window_writes" value="128285"/>
			<stat name="fp_inst_window_wakeup_accesses" value="256570"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="384855"/>
			<stat name="float_regfile_reads" value="64142"/>
			<stat name="int_regfile_writes" value="192427"/>
			<stat name="float_regfile_writes" value="32071"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12828"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="252627"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="252627"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.187021"/>
			<stat name="LSU_duty_cycle" value="0.114698"/>
			<stat name="MemManU_I_duty_cycle" value="0.187021"/>
			<stat name="MemManU_D_duty_cycle" value="0.114698"/>
			<stat name="ALU_duty_cycle" value="0.001925"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001925"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core1.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core1.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13016"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core1.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13016"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core1.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="157352"/>
				<stat name="total_misses" value="10345"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core1.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="100232"/>
				<stat name="write_accesses" value="57120"/>
				<stat name="read_misses" value="8905"/>
				<stat name="write_misses" value="1440"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core1.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="49121"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core2" name="core2">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="322786"/>
			<stat name="int_instructions" value="257410"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="62376"/>
			<stat name="branch_mispredictions" value="152"/>
			<stat name="load_instructions" value="126734"/>
			<stat name="store_instructions" value="70370"/>
			<stat name="committed_instructions" value="322786"/>
			<stat name="committed_int_instructions" value="257410"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="230624"/>
			<stat name="busy_cycles"  value="1141253"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="384267"/>
			<stat name="ROB_writes" value="384267"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="645572"/>
			<stat name="rename_writes" value="322786"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="322786"/>
			<stat name="inst_window_writes" value="322786"/>
			<stat name="inst_window_wakeup_accesses" value="645572"/>
			<stat name="fp_inst_window_reads" value="161393"/>
			<stat name="fp_inst_window_writes" value="161393"/>
			<stat name="fp_inst_window_wakeup_accesses" value="322786"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="484179"/>
			<stat name="float_regfile_reads" value="80696"/>
			<stat name="int_regfile_writes" value="242089"/>
			<stat name="float_regfile_writes" value="40348"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="16139"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="318891"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="318891"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.235288"/>
			<stat name="LSU_duty_cycle" value="0.143675"/>
			<stat name="MemManU_I_duty_cycle" value="0.235288"/>
			<stat name="MemManU_D_duty_cycle" value="0.143675"/>
			<stat name="ALU_duty_cycle" value="0.002428"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.002428"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core2.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core2.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13021"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core2.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13021"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core2.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="197104"/>
				<stat name="total_misses" value="11608"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core2.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="126734"/>
				<stat name="write_accesses" value="70370"/>
				<stat name="read_misses" value="10067"/>
				<stat name="write_misses" value="1541"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core2.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="62376"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core3" name="core3">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="244923"/>
			<stat name="int_instructions" value="195121"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="46802"/>
			<stat name="branch_mispredictions" value="117"/>
			<stat name="load_instructions" value="95593"/>
			<stat name="store_instructions" value="54801"/>
			<stat name="committed_instructions" value="244923"/>
			<stat name="committed_int_instructions" value="195121"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="357941"/>
			<stat name="busy_cycles"  value="1013935"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="290831"/>
			<stat name="ROB_writes" value="290831"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="489846"/>
			<stat name="rename_writes" value="244923"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="244923"/>
			<stat name="inst_window_writes" value="244923"/>
			<stat name="inst_window_wakeup_accesses" value="489846"/>
			<stat name="fp_inst_window_reads" value="122461"/>
			<stat name="fp_inst_window_writes" value="122461"/>
			<stat name="fp_inst_window_wakeup_accesses" value="244923"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="367384"/>
			<stat name="float_regfile_reads" value="61230"/>
			<stat name="int_regfile_writes" value="183692"/>
			<stat name="float_regfile_writes" value="30615"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12246"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="241029"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="241029"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.178531"/>
			<stat name="LSU_duty_cycle" value="0.109626"/>
			<stat name="MemManU_I_duty_cycle" value="0.178531"/>
			<stat name="MemManU_D_duty_cycle" value="0.109626"/>
			<stat name="ALU_duty_cycle" value="0.001837"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001837"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core3.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core3.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13016"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core3.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13016"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core3.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="150394"/>
				<stat name="total_misses" value="10143"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core3.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="95593"/>
				<stat name="write_accesses" value="54801"/>
				<stat name="read_misses" value="8690"/>
				<stat name="write_misses" value="1453"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core3.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="46802"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core4" name="core4">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="259317"/>
			<stat name="int_instructions" value="206635"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="49682"/>
			<stat name="branch_mispredictions" value="84"/>
			<stat name="load_instructions" value="101357"/>
			<stat name="store_instructions" value="57676"/>
			<stat name="committed_instructions" value="259317"/>
			<stat name="committed_int_instructions" value="206635"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="193226"/>
			<stat name="busy_cycles"  value="1178651"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="308106"/>
			<stat name="ROB_writes" value="308106"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="518634"/>
			<stat name="rename_writes" value="259317"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="259317"/>
			<stat name="inst_window_writes" value="259317"/>
			<stat name="inst_window_wakeup_accesses" value="518634"/>
			<stat name="fp_inst_window_reads" value="129658"/>
			<stat name="fp_inst_window_writes" value="129658"/>
			<stat name="fp_inst_window_wakeup_accesses" value="259317"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="388975"/>
			<stat name="float_regfile_reads" value="64829"/>
			<stat name="int_regfile_writes" value="194487"/>
			<stat name="float_regfile_writes" value="32414"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12965"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="255424"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="255424"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.189023"/>
			<stat name="LSU_duty_cycle" value="0.115924"/>
			<stat name="MemManU_I_duty_cycle" value="0.189023"/>
			<stat name="MemManU_D_duty_cycle" value="0.115924"/>
			<stat name="ALU_duty_cycle" value="0.001946"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001946"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core4.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core4.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13014"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core4.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13014"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core4.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="159033"/>
				<stat name="total_misses" value="11747"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core4.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="101357"/>
				<stat name="write_accesses" value="57676"/>
				<stat name="read_misses" value="9711"/>
				<stat name="write_misses" value="2036"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core4.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="49682"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core5" name="core5">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="273688"/>
			<stat name="int_instructions" value="218132"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="52556"/>
			<stat name="branch_mispredictions" value="123"/>
			<stat name="load_instructions" value="107105"/>
			<stat name="store_instructions" value="60550"/>
			<stat name="committed_instructions" value="273688"/>
			<stat name="committed_int_instructions" value="218132"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="251748"/>
			<stat name="busy_cycles"  value="1120129"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="325350"/>
			<stat name="ROB_writes" value="325350"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="547376"/>
			<stat name="rename_writes" value="273688"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="273688"/>
			<stat name="inst_window_writes" value="273688"/>
			<stat name="inst_window_wakeup_accesses" value="547376"/>
			<stat name="fp_inst_window_reads" value="136844"/>
			<stat name="fp_inst_window_writes" value="136844"/>
			<stat name="fp_inst_window_wakeup_accesses" value="273688"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="410532"/>
			<stat name="float_regfile_reads" value="68422"/>
			<stat name="int_regfile_writes" value="205266"/>
			<stat name="float_regfile_writes" value="34211"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="13684"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="269794"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="269794"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.199499"/>
			<stat name="LSU_duty_cycle" value="0.122208"/>
			<stat name="MemManU_I_duty_cycle" value="0.199499"/>
			<stat name="MemManU_D_duty_cycle" value="0.122208"/>
			<stat name="ALU_duty_cycle" value="0.002055"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.002055"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core5.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core5.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13014"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core5.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13014"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core5.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="167655"/>
				<stat name="total_misses" value="10600"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core5.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="107105"/>
				<stat name="write_accesses" value="60550"/>
				<stat name="read_misses" value="9168"/>
				<stat name="write_misses" value="1432"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core5.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="52556"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core6" name="core6">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="275466"/>
			<stat name="int_instructions" value="219562"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="52904"/>
			<stat name="branch_mispredictions" value="156"/>
			<stat name="load_instructions" value="107801"/>
			<stat name="store_instructions" value="60898"/>
			<stat name="committed_instructions" value="275466"/>
			<stat name="committed_int_instructions" value="219562"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="225605"/>
			<stat name="busy_cycles"  value="1146272"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="327438"/>
			<stat name="ROB_writes" value="327438"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="550932"/>
			<stat name="rename_writes" value="275466"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="275466"/>
			<stat name="inst_window_writes" value="275466"/>
			<stat name="inst_window_wakeup_accesses" value="550932"/>
			<stat name="fp_inst_window_reads" value="137733"/>
			<stat name="fp_inst_window_writes" value="137733"/>
			<stat name="fp_inst_window_wakeup_accesses" value="275466"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="413199"/>
			<stat name="float_regfile_reads" value="68866"/>
			<stat name="int_regfile_writes" value="206599"/>
			<stat name="float_regfile_writes" value="34433"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="13773"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="271534"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="271534"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.200795"/>
			<stat name="LSU_duty_cycle" value="0.122969"/>
			<stat name="MemManU_I_duty_cycle" value="0.200795"/>
			<stat name="MemManU_D_duty_cycle" value="0.122969"/>
			<stat name="ALU_duty_cycle" value="0.002069"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.002069"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core6.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core6.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13014"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core6.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13014"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core6.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="168699"/>
				<stat name="total_misses" value="10710"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core6.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="107801"/>
				<stat name="write_accesses" value="60898"/>
				<stat name="read_misses" value="9240"/>
				<stat name="write_misses" value="1470"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core6.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="52904"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core7" name="core7">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="254230"/>
			<stat name="int_instructions" value="202564"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="48666"/>
			<stat name="branch_mispredictions" value="178"/>
			<stat name="load_instructions" value="99322"/>
			<stat name="store_instructions" value="56663"/>
			<stat name="committed_instructions" value="254230"/>
			<stat name="committed_int_instructions" value="202564"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="295618"/>
			<stat name="busy_cycles"  value="1076259"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="302002"/>
			<stat name="ROB_writes" value="302002"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="508460"/>
			<stat name="rename_writes" value="254230"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="254230"/>
			<stat name="inst_window_writes" value="254230"/>
			<stat name="inst_window_wakeup_accesses" value="508460"/>
			<stat name="fp_inst_window_reads" value="127115"/>
			<stat name="fp_inst_window_writes" value="127115"/>
			<stat name="fp_inst_window_wakeup_accesses" value="254230"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="381345"/>
			<stat name="float_regfile_reads" value="63557"/>
			<stat name="int_regfile_writes" value="190672"/>
			<stat name="float_regfile_writes" value="31778"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12711"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="250336"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="250336"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.185315"/>
			<stat name="LSU_duty_cycle" value="0.113702"/>
			<stat name="MemManU_I_duty_cycle" value="0.185315"/>
			<stat name="MemManU_D_duty_cycle" value="0.113702"/>
			<stat name="ALU_duty_cycle" value="0.001908"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001908"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core7.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core7.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13011"/>
				<stat name="total_misses" value="15"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core7.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13011"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core7.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="155985"/>
				<stat name="total_misses" value="10041"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core7.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="99322"/>
				<stat name="write_accesses" value="56663"/>
				<stat name="read_misses" value="8676"/>
				<stat name="write_misses" value="1365"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core7.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="48666"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core8" name="core8">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="278170"/>
			<stat name="int_instructions" value="221716"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="53454"/>
			<stat name="branch_mispredictions" value="118"/>
			<stat name="load_instructions" value="108898"/>
			<stat name="store_instructions" value="61451"/>
			<stat name="committed_instructions" value="278170"/>
			<stat name="committed_int_instructions" value="221716"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="212831"/>
			<stat name="busy_cycles"  value="1159046"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="330730"/>
			<stat name="ROB_writes" value="330730"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="556340"/>
			<stat name="rename_writes" value="278170"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="278170"/>
			<stat name="inst_window_writes" value="278170"/>
			<stat name="inst_window_wakeup_accesses" value="556340"/>
			<stat name="fp_inst_window_reads" value="139085"/>
			<stat name="fp_inst_window_writes" value="139085"/>
			<stat name="fp_inst_window_wakeup_accesses" value="278170"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="417255"/>
			<stat name="float_regfile_reads" value="69542"/>
			<stat name="int_regfile_writes" value="208627"/>
			<stat name="float_regfile_writes" value="34771"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="13908"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="274276"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="274276"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.202766"/>
			<stat name="LSU_duty_cycle" value="0.124172"/>
			<stat name="MemManU_I_duty_cycle" value="0.202766"/>
			<stat name="MemManU_D_duty_cycle" value="0.124172"/>
			<stat name="ALU_duty_cycle" value="0.002089"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.002089"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core8.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core8.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13011"/>
				<stat name="total_misses" value="15"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core8.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13011"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core8.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="170349"/>
				<stat name="total_misses" value="11527"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core8.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="108898"/>
				<stat name="write_accesses" value="61451"/>
				<stat name="read_misses" value="9486"/>
				<stat name="write_misses" value="2041"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core8.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="53454"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core9" name="core9">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="244567"/>
			<stat name="int_instructions" value="194835"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="46732"/>
			<stat name="branch_mispredictions" value="116"/>
			<stat name="load_instructions" value="95453"/>
			<stat name="store_instructions" value="54730"/>
			<stat name="committed_instructions" value="244567"/>
			<stat name="committed_int_instructions" value="194835"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="341617"/>
			<stat name="busy_cycles"  value="1030259"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="290405"/>
			<stat name="ROB_writes" value="290405"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="489134"/>
			<stat name="rename_writes" value="244567"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="244567"/>
			<stat name="inst_window_writes" value="244567"/>
			<stat name="inst_window_wakeup_accesses" value="489134"/>
			<stat name="fp_inst_window_reads" value="122283"/>
			<stat name="fp_inst_window_writes" value="122283"/>
			<stat name="fp_inst_window_wakeup_accesses" value="244567"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="366850"/>
			<stat name="float_regfile_reads" value="61141"/>
			<stat name="int_regfile_writes" value="183425"/>
			<stat name="float_regfile_writes" value="30570"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12228"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="240673"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="240673"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.178272"/>
			<stat name="LSU_duty_cycle" value="0.109473"/>
			<stat name="MemManU_I_duty_cycle" value="0.178272"/>
			<stat name="MemManU_D_duty_cycle" value="0.109473"/>
			<stat name="ALU_duty_cycle" value="0.001834"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001834"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core9.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core9.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13016"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core9.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13016"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core9.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="150183"/>
				<stat name="total_misses" value="9791"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core9.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="95453"/>
				<stat name="write_accesses" value="54730"/>
				<stat name="read_misses" value="8377"/>
				<stat name="write_misses" value="1414"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core9.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="46732"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core10" name="core10">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="259948"/>
			<stat name="int_instructions" value="207146"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="49802"/>
			<stat name="branch_mispredictions" value="104"/>
			<stat name="load_instructions" value="101594"/>
			<stat name="store_instructions" value="57799"/>
			<stat name="committed_instructions" value="259948"/>
			<stat name="committed_int_instructions" value="207146"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="280327"/>
			<stat name="busy_cycles"  value="1091550"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="308818"/>
			<stat name="ROB_writes" value="308818"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="519896"/>
			<stat name="rename_writes" value="259948"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="259948"/>
			<stat name="inst_window_writes" value="259948"/>
			<stat name="inst_window_wakeup_accesses" value="519896"/>
			<stat name="fp_inst_window_reads" value="129974"/>
			<stat name="fp_inst_window_writes" value="129974"/>
			<stat name="fp_inst_window_wakeup_accesses" value="259948"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="389922"/>
			<stat name="float_regfile_reads" value="64987"/>
			<stat name="int_regfile_writes" value="194961"/>
			<stat name="float_regfile_writes" value="32493"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12997"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="256016"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="256016"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.189483"/>
			<stat name="LSU_duty_cycle" value="0.116186"/>
			<stat name="MemManU_I_duty_cycle" value="0.189483"/>
			<stat name="MemManU_D_duty_cycle" value="0.116186"/>
			<stat name="ALU_duty_cycle" value="0.001951"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001951"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core10.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core10.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13011"/>
				<stat name="total_misses" value="15"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core10.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13011"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core10.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="159393"/>
				<stat name="total_misses" value="10315"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core10.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="101594"/>
				<stat name="write_accesses" value="57799"/>
				<stat name="read_misses" value="8937"/>
				<stat name="write_misses" value="1378"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core10.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="49802"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core11" name="core11">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="256992"/>
			<stat name="int_instructions" value="204775"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="49217"/>
			<stat name="branch_mispredictions" value="138"/>
			<stat name="load_instructions" value="100427"/>
			<stat name="store_instructions" value="57211"/>
			<stat name="committed_instructions" value="256992"/>
			<stat name="committed_int_instructions" value="204775"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="282156"/>
			<stat name="busy_cycles"  value="1089721"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="305316"/>
			<stat name="ROB_writes" value="305316"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="513984"/>
			<stat name="rename_writes" value="256992"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="256992"/>
			<stat name="inst_window_writes" value="256992"/>
			<stat name="inst_window_wakeup_accesses" value="513984"/>
			<stat name="fp_inst_window_reads" value="128496"/>
			<stat name="fp_inst_window_writes" value="128496"/>
			<stat name="fp_inst_window_wakeup_accesses" value="256992"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="385488"/>
			<stat name="float_regfile_reads" value="64248"/>
			<stat name="int_regfile_writes" value="192744"/>
			<stat name="float_regfile_writes" value="32124"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12849"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="253099"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="253099"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.187329"/>
			<stat name="LSU_duty_cycle" value="0.114907"/>
			<stat name="MemManU_I_duty_cycle" value="0.187329"/>
			<stat name="MemManU_D_duty_cycle" value="0.114907"/>
			<stat name="ALU_duty_cycle" value="0.001929"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001929"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core11.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core11.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13014"/>
				<stat name="total_misses" value="16"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core11.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13014"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core11.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="157638"/>
				<stat name="total_misses" value="10335"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core11.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="100427"/>
				<stat name="write_accesses" value="57211"/>
				<stat name="read_misses" value="8846"/>
				<stat name="write_misses" value="1489"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core11.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="49217"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core12" name="core12">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="232079"/>
			<stat name="int_instructions" value="184843"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="44236"/>
			<stat name="branch_mispredictions" value="100"/>
			<stat name="load_instructions" value="90462"/>
			<stat name="store_instructions" value="52233"/>
			<stat name="committed_instructions" value="232079"/>
			<stat name="committed_int_instructions" value="184843"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="421222"/>
			<stat name="busy_cycles"  value="950654"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="275422"/>
			<stat name="ROB_writes" value="275422"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="464158"/>
			<stat name="rename_writes" value="232079"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="232079"/>
			<stat name="inst_window_writes" value="232079"/>
			<stat name="inst_window_wakeup_accesses" value="464158"/>
			<stat name="fp_inst_window_reads" value="116039"/>
			<stat name="fp_inst_window_writes" value="116039"/>
			<stat name="fp_inst_window_wakeup_accesses" value="232079"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="348118"/>
			<stat name="float_regfile_reads" value="58019"/>
			<stat name="int_regfile_writes" value="174059"/>
			<stat name="float_regfile_writes" value="29009"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="11603"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="228186"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="228186"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.169169"/>
			<stat name="LSU_duty_cycle" value="0.104014"/>
			<stat name="MemManU_I_duty_cycle" value="0.169169"/>
			<stat name="MemManU_D_duty_cycle" value="0.104014"/>
			<stat name="ALU_duty_cycle" value="0.001739"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001739"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core12.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core12.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13011"/>
				<stat name="total_misses" value="15"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core12.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13011"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core12.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="142695"/>
				<stat name="total_misses" value="9799"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core12.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="90462"/>
				<stat name="write_accesses" value="52233"/>
				<stat name="read_misses" value="7866"/>
				<stat name="write_misses" value="1933"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core12.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="44236"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core13" name="core13">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="270698"/>
			<stat name="int_instructions" value="215744"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="51954"/>
			<stat name="branch_mispredictions" value="103"/>
			<stat name="load_instructions" value="105896"/>
			<stat name="store_instructions" value="59950"/>
			<stat name="committed_instructions" value="270698"/>
			<stat name="committed_int_instructions" value="215744"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="288726"/>
			<stat name="busy_cycles"  value="1083151"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="321729"/>
			<stat name="ROB_writes" value="321729"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="541396"/>
			<stat name="rename_writes" value="270698"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="270698"/>
			<stat name="inst_window_writes" value="270698"/>
			<stat name="inst_window_wakeup_accesses" value="541396"/>
			<stat name="fp_inst_window_reads" value="135349"/>
			<stat name="fp_inst_window_writes" value="135349"/>
			<stat name="fp_inst_window_wakeup_accesses" value="270698"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="406047"/>
			<stat name="float_regfile_reads" value="67674"/>
			<stat name="int_regfile_writes" value="203023"/>
			<stat name="float_regfile_writes" value="33837"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="13534"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="266775"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="266775"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.197319"/>
			<stat name="LSU_duty_cycle" value="0.120890"/>
			<stat name="MemManU_I_duty_cycle" value="0.197319"/>
			<stat name="MemManU_D_duty_cycle" value="0.120890"/>
			<stat name="ALU_duty_cycle" value="0.002033"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.002033"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core13.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core13.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13012"/>
				<stat name="total_misses" value="15"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core13.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13012"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core13.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="165846"/>
				<stat name="total_misses" value="10257"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core13.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="105896"/>
				<stat name="write_accesses" value="59950"/>
				<stat name="read_misses" value="8860"/>
				<stat name="write_misses" value="1397"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core13.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="51954"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core14" name="core14">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="287845"/>
			<stat name="int_instructions" value="229458"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="55387"/>
			<stat name="branch_mispredictions" value="133"/>
			<stat name="load_instructions" value="112767"/>
			<stat name="store_instructions" value="63386"/>
			<stat name="committed_instructions" value="287845"/>
			<stat name="committed_int_instructions" value="229458"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="191055"/>
			<stat name="busy_cycles"  value="1180822"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="342339"/>
			<stat name="ROB_writes" value="342339"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="575690"/>
			<stat name="rename_writes" value="287845"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="287845"/>
			<stat name="inst_window_writes" value="287845"/>
			<stat name="inst_window_wakeup_accesses" value="575690"/>
			<stat name="fp_inst_window_reads" value="143922"/>
			<stat name="fp_inst_window_writes" value="143922"/>
			<stat name="fp_inst_window_wakeup_accesses" value="287845"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="431767"/>
			<stat name="float_regfile_reads" value="71961"/>
			<stat name="int_regfile_writes" value="215883"/>
			<stat name="float_regfile_writes" value="35980"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="14392"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="283952"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="283952"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.209818"/>
			<stat name="LSU_duty_cycle" value="0.128403"/>
			<stat name="MemManU_I_duty_cycle" value="0.209818"/>
			<stat name="MemManU_D_duty_cycle" value="0.128403"/>
			<stat name="ALU_duty_cycle" value="0.002163"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.002163"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core14.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core14.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13009"/>
				<stat name="total_misses" value="14"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core14.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13009"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core14.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="176153"/>
				<stat name="total_misses" value="10962"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core14.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="112767"/>
				<stat name="write_accesses" value="63386"/>
				<stat name="read_misses" value="9564"/>
				<stat name="write_misses" value="1398"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core14.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="55387"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.core15" name="core15">
		<!-- Core property -->
			<param name="clock_rate" value='2660'/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="opt_local" value="1"/>
			<param name="instruction_length" value="32"/>
			<param name="opcode_width" value="16"/>
			<!-- address width determins the tag_width in Cache, LSQ and buffers in cache controller 
			default value is machine_bits, if not set --> 
			<param name="machine_type" value="0"/><!-- 1 inorder; 0 OOO-->
			<!-- inorder/OoO -->
			<param name="number_hardware_threads" value="1"/>
			<!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
			it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
			branch information in consective branch instructions in the same fetch group can be read out from BTB once.--> 
			<param name="fetch_width" value="64"/>
			<!-- fetch_width determins the size of cachelines of L1 cache block -->
			<param name="number_instruction_fetch_ports" value="1"/>
			<param name="decode_width" value="64"/>
			<!-- decode_width determins the number of ports of the 
			renaming table (both RAM and CAM) scheme -->
			<param name="x86" value="1"/> 
			<param name="micro_opcode_width" value="8"/> 
			<param name="issue_width" value="64"/>
			<param name="peak_issue_width" value="96"/>
			<!-- issue_width determins the number of ports of Issue window and other logic 
				as in the complexity effective proccessors paper; issue_width==dispatch_width -->
			<param name="commit_width" value="64"/>
			<!-- commit_width determins the number of ports of register files -->
			<param name="fp_issue_width" value="2"/>
			<param name="prediction_width" value="1"/>
			<!-- number of branch instructions can be predicted simultannouesl-->
			<!-- Current version of McPAT does not distinguish int and floating point pipelines
			Theses parameters are reserved for future use.-->
			<param name="pipelines_per_core" value="1,1"/>
			<!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
			<param name="pipeline_depth" value="14,14"/>
			<!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
			<!-- issue and exe unit-->
			<param name="ALU_per_core" value="96"/>
			<param name="MUL_per_core" value="1"/>
			<!-- In superscalar processors, usually all ALU are not the same. certain inst. can only
			be processed by certain ALU. However, current McPAT does not consider this subtle difference -->
			<param name="FPU_per_core" value="2"/>
			<!-- buffer between IF and ID stage -->
			<param name="instruction_buffer_size" value="32"/>
			<!-- buffer between ID and sche/exe stage -->
			<param name="decoded_stream_buffer_size" value="16"/>
			<param name="instruction_window_scheme" value="1"/><!-- 0 PHYREG based, 1 RSBASED-->
			<!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
			<param name="instruction_window_size" value="36"/>
			<param name="fp_instruction_window_size" value="0"/>
			<!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
			<param name="ROB_size" value="128"/>
			<!-- each in-flight instruction has an entry in ROB -->
			<!-- registers -->
			<param name="archi_Regs_IRF_size" value="16"/>
			<param name="archi_Regs_FRF_size" value="32"/>
			<!--  if OoO processor, phy_reg number is needed for renaming logic, 
			renaming logic is for both integer and floating point insts.  -->
			<param name="phy_Regs_IRF_size" value="256"/>
			<param name="phy_Regs_FRF_size" value="256"/>
			<!-- rename logic -->
			<param name="rename_scheme" value="0"/>
			<!-- can be RAM based(0) or CAM based(1) rename scheme
			RAM-based scheme will have free list, status table;
			RAM-based scheme have the valid bit in the data field of the CAM 
			both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
			Detailed RAT Implementation see TR -->
			<param name="register_windows_size" value="0"/>
			<!-- how many windows in the windowed register file, sun processors;
			no register windowing is used when this number is 0 -->
			<!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
			They will always try to exeute out-of-order though. -->
			<param name="LSU_order" value="inorder"/>
			<param name="store_buffer_size" value="96"/>
			<!-- By default, in-order cores do not have load buffers -->
			<param name="load_buffer_size" value="48"/>
			<!-- number of ports refer to sustainable concurrent memory accesses -->
			<param name="memory_ports" value="1"/>
			<!-- max_allowed_in_flight_memo_instructions determins the # of ports of load and store buffer
			as well as the ports of Dcache which is connected to LSU -->
			<!-- dual-pumped Dcache can be used to save the extra read/write ports -->
			<param name="RAS_size" value="64"/>
			<!-- general stats, defines simulation periods;require total, idle, and busy cycles for senity check  -->
			<!-- please note: if target architecture is X86, then all the instrucions refer to (fused) micro-ops -->
			<stat name="total_instructions" value="258340"/>
			<stat name="int_instructions" value="205852"/>
			<stat name="fp_instructions" value="3000"/>
			<stat name="branch_instructions" value="49488"/>
			<stat name="branch_mispredictions" value="99"/>
			<stat name="load_instructions" value="100966"/>
			<stat name="store_instructions" value="57485"/>
			<stat name="committed_instructions" value="258340"/>
			<stat name="committed_int_instructions" value="205852"/>
			<stat name="committed_fp_instructions" value="3000"/>
			<stat name="total_cycles" value="1371877"/>
			<stat name="idle_cycles" value="253157"/>
			<stat name="busy_cycles"  value="1118720"/>
			<!-- instruction buffer stats -->
			<!-- ROB stats, both RS and Phy based OoOs have ROB
			performance simulator should capture the difference on accesses,
			otherwise, McPAT has to guess based on number of commited instructions. -->
			<stat name="ROB_reads" value="306934"/>
			<stat name="ROB_writes" value="306934"/>
			<!-- RAT accesses -->
			<stat name="rename_reads" value="516680"/>
			<stat name="rename_writes" value="258340"/>
			<stat name="fp_rename_reads" value="6000"/>
			<stat name="fp_rename_writes" value="3000"/>
			<!-- decode and rename stage use this, should be total ic - nop -->
			<!-- Inst window stats -->
			<stat name="inst_window_reads" value="258340"/>
			<stat name="inst_window_writes" value="258340"/>
			<stat name="inst_window_wakeup_accesses" value="516680"/>
			<stat name="fp_inst_window_reads" value="129170"/>
			<stat name="fp_inst_window_writes" value="129170"/>
			<stat name="fp_inst_window_wakeup_accesses" value="258340"/>
			<!--  RF accesses -->
			<stat name="int_regfile_reads" value="387510"/>
			<stat name="float_regfile_reads" value="64585"/>
			<stat name="int_regfile_writes" value="193755"/>
			<stat name="float_regfile_writes" value="32292"/>
			<!-- accesses to the working reg -->
			<stat name="function_calls" value="12917"/>
			<stat name="context_switches" value="0"/>
			<!-- Number of Windowes switches (number of function calls and returns)-->
			<!-- Alu stats by default, the processor has one FPU that includes the divider and 
			 multiplier. The fpu accesses should include accesses to multiplier and divider  -->
			<stat name="ialu_accesses" value="254446"/>
			<stat name="fpu_accesses" value="3000"/>
			<stat name="mul_accesses" value="1000"/>
			<stat name="cdb_alu_accesses" value="254446"/>
			<stat name="cdb_mul_accesses" value="1000"/>
			<stat name="cdb_fpu_accesses" value="3000"/>
			<!-- multiple cycle accesses should be counted multiple times, 
			otherwise, McPAT can use internal counter for different floating point instructions 
			to get final accesses. But that needs detailed info for floating point inst mix -->
			<!--  currently the performance simulator should 
			make sure all the numbers are final numbers, 
			including the explicit read/write accesses, 
			and the implicite accesses such as replacements and etc.
			Future versions of McPAT may be able to reason the implicite access
			based on param and stats of last level cache
			The same rule applies to all cache access stats too!  -->
			<stat name="IFU_duty_cycle" value="0.188311"/>
			<stat name="LSU_duty_cycle" value="0.115499"/>
			<stat name="MemManU_I_duty_cycle" value="0.188311"/>
			<stat name="MemManU_D_duty_cycle" value="0.115499"/>
			<stat name="ALU_duty_cycle" value="0.001939"/>
			<stat name="MUL_duty_cycle" value="0.000729"/>
			<stat name="FPU_duty_cycle" value="0.002187"/>
			<stat name="ALU_cdb_duty_cycle" value="0.001939"/>
			<stat name="MUL_cdb_duty_cycle" value="0.000729"/>
			<stat name="FPU_cdb_duty_cycle" value="0.002187"/>
			<param name="number_of_BPT" value="2"/>
			<component id="system.core15.predictor" name="PBT">
				<!-- branch predictor; tournament predictor see Alpha implementation -->
				<param name="local_predictor_size" value="10,3"/>
				<param name="local_predictor_entries" value="1024"/>
				<param name="global_predictor_entries" value="4096"/>
				<param name="global_predictor_bits" value="2"/>
				<param name="chooser_predictor_entries" value="4096"/>
				<param name="chooser_predictor_bits" value="2"/>
			</component>
			<component id="system.core15.itlb" name="itlb">
				<param name="number_entries" value="128"/>
				<stat name="total_accesses" value="13011"/>
				<stat name="total_misses" value="15"/>
				<stat name="conflicts" value="0"/>
				<!-- there is no write requests to itlb although writes happen to itlb after miss,
				which is actually a replacement -->
			</component>
			<component id="system.core15.icache" name="icache">
				<!-- there is no write requests to itlb although writes happen to it after miss, 
				which is actually a replacement -->
				<param name="icache_config" value="32768,64,8,1,1,4, 0, 1"/>
				<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="buffer_sizes" value="16, 16, 16, 0"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="13011"/>
				<stat name="read_misses" value="0"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core15.dtlb" name="dtlb">
				<param name="number_entries" value="256"/>
				<stat name="total_accesses" value="158451"/>
				<stat name="total_misses" value="10418"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core15.dcache" name="dcache">
				<!-- all the buffer related are optional -->
				<param name="dcache_config" value="32768,64,8,2,10,40, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="100966"/>
				<stat name="write_accesses" value="57485"/>
				<stat name="read_misses" value="9013"/>
				<stat name="write_misses" value="1405"/>
				<stat name="conflicts" value="0"/>
			</component>
			<component id="system.core15.BTB" name="BTB">
				<!-- all the buffer related are optional -->
				<param name="BTB_config" value="18944,8,4,1, 1,3"/>
				<stat name="read_accesses" value="49488"/>
				<stat name="write_accesses" value="0"/>
				<!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
			</component>
	</component>
			<!--**********************************************************************-->
		<component id="system.L20" name="L20">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8312"/>
				<stat name="write_accesses" value="2138"/>
				<stat name="read_misses" value="8312"/>
				<stat name="write_misses" value="2138"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007617"/>
		</component>
		<component id="system.L21" name="L21">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8921"/>
				<stat name="write_accesses" value="1440"/>
				<stat name="read_misses" value="8921"/>
				<stat name="write_misses" value="1440"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007552"/>
		</component>
		<component id="system.L22" name="L22">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="10083"/>
				<stat name="write_accesses" value="1541"/>
				<stat name="read_misses" value="10083"/>
				<stat name="write_misses" value="1541"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.008473"/>
		</component>
		<component id="system.L23" name="L23">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8706"/>
				<stat name="write_accesses" value="1453"/>
				<stat name="read_misses" value="8706"/>
				<stat name="write_misses" value="1453"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007405"/>
		</component>
		<component id="system.L24" name="L24">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="9727"/>
				<stat name="write_accesses" value="2036"/>
				<stat name="read_misses" value="9727"/>
				<stat name="write_misses" value="2036"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.008574"/>
		</component>
		<component id="system.L25" name="L25">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="9184"/>
				<stat name="write_accesses" value="1432"/>
				<stat name="read_misses" value="9184"/>
				<stat name="write_misses" value="1432"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007738"/>
		</component>
		<component id="system.L26" name="L26">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="9256"/>
				<stat name="write_accesses" value="1470"/>
				<stat name="read_misses" value="9256"/>
				<stat name="write_misses" value="1470"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007818"/>
		</component>
		<component id="system.L27" name="L27">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8691"/>
				<stat name="write_accesses" value="1365"/>
				<stat name="read_misses" value="8691"/>
				<stat name="write_misses" value="1365"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007330"/>
		</component>
		<component id="system.L28" name="L28">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="9501"/>
				<stat name="write_accesses" value="2041"/>
				<stat name="read_misses" value="9501"/>
				<stat name="write_misses" value="2041"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.008413"/>
		</component>
		<component id="system.L29" name="L29">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8393"/>
				<stat name="write_accesses" value="1414"/>
				<stat name="read_misses" value="8393"/>
				<stat name="write_misses" value="1414"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007149"/>
		</component>
		<component id="system.L210" name="L210">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8952"/>
				<stat name="write_accesses" value="1378"/>
				<stat name="read_misses" value="8952"/>
				<stat name="write_misses" value="1378"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007530"/>
		</component>
		<component id="system.L211" name="L211">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8862"/>
				<stat name="write_accesses" value="1489"/>
				<stat name="read_misses" value="8862"/>
				<stat name="write_misses" value="1489"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007545"/>
		</component>
		<component id="system.L212" name="L212">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="7881"/>
				<stat name="write_accesses" value="1933"/>
				<stat name="read_misses" value="7881"/>
				<stat name="write_misses" value="1933"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007154"/>
		</component>
		<component id="system.L213" name="L213">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="8875"/>
				<stat name="write_accesses" value="1397"/>
				<stat name="read_misses" value="8875"/>
				<stat name="write_misses" value="1397"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007488"/>
		</component>
		<component id="system.L214" name="L214">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="9578"/>
				<stat name="write_accesses" value="1398"/>
				<stat name="read_misses" value="9578"/>
				<stat name="write_misses" value="1398"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.008001"/>
		</component>
		<component id="system.L215" name="L215">
				<param name="L2_config" value="1048576,64,8,8,1,8, 0, 1"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<stat name="read_accesses" value="9028"/>
				<stat name="write_accesses" value="1405"/>
				<stat name="read_misses" value="9028"/>
				<stat name="write_misses" value="1405"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.007605"/>
		</component>
		<component id="system.L30" name="L30">
				<param name="L3_config" value="8388608,64,16, 16, 16, 30,1"/>
		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="36022"/>
				<stat name="write_accesses" value="6572"/>
				<stat name="read_misses" value="17399"/>
				<stat name="write_misses" value="5254"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.031048"/>
		</component>
		<component id="system.L31" name="L31">
				<param name="L3_config" value="8388608,64,16, 16, 16, 30,1"/>
		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="36858"/>
				<stat name="write_accesses" value="6303"/>
				<stat name="read_misses" value="17146"/>
				<stat name="write_misses" value="5218"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.031461"/>
		</component>
		<component id="system.L32" name="L32">
				<param name="L3_config" value="8388608,64,16, 16, 16, 30,1"/>
		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="35708"/>
				<stat name="write_accesses" value="6322"/>
				<stat name="read_misses" value="17069"/>
				<stat name="write_misses" value="5249"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.030637"/>
		</component>
		<component id="system.L33" name="L33">
				<param name="L3_config" value="8388608,64,16, 16, 16, 30,1"/>
		<!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
				<param name="clockrate" value="2660"/>
				<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
				<param name="ports" value="1,1,1"/>
				<param name="device_type" value="0"/>
				<param name="buffer_sizes" value="16, 16, 16, 16"/>
				<!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
				<stat name="read_accesses" value="35362"/>
				<stat name="write_accesses" value="6133"/>
				<stat name="read_misses" value="17019"/>
				<stat name="write_misses" value="5040"/>
				<stat name="conflicts" value="0"/>
				<stat name="duty_cycle" value="0.030247"/>
		</component>
			<!--**********************************************************************-->
		<component id="system.NoC0" name="noc0">
			<param name="clockrate" value="2660"/>
			<param name="vdd" value="1.200000"/><!-- 0 means using ITRS default vdd -->
			<param name="type" value="0"/>
			<!--0:bus, 1:NoC , for bus no matter how many nodes sharing the bus at each time only one node can send req -->
			<param name="horizontal_nodes" value="1"/>
			<param name="vertical_nodes" value="1"/>
			<param name="has_global_link" value="0"/>
			<param name="link_throughput" value="1"/>
			<param name="link_latency" value="1"/>
			<param name="input_ports" value="1"/>
			<param name="output_ports" value="1"/>
			<param name="flit_bits" value="256"/>
			<param name="chip_coverage" value="1"/>
			<param name="link_routing_over_percentage" value="0.5"/>
			<stat name="total_accesses" value="165776"/>
			<stat name="duty_cycle" value="1.000000"/>
		</component>
			<!--**********************************************************************-->
		<component id="system.mc" name="mc">
			<!-- current version of McPAT uses published values for base parameters of memory controller
			improvments on MC will be added in later versions. -->
			<param name="mc_clock" value="200"/><!--MHz-->
			<param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
			<param name="peak_transfer_rate" value="3200"/>
			<param name="block_size" value="64"/><!--B-->
			<param name="number_mcs" value="0"/>
			<!-- current McPAT only supports homogeneous memory controllers -->
			<param name="memory_channels_per_mc" value="1"/>
			<param name="number_ranks" value="2"/>
			<param name="withPHY" value="0"/>
			<param name="req_window_size_per_channel" value="32"/>
			<param name="IO_buffer_size_per_channel" value="32"/>
			<param name="databus_width" value="128"/>
			<param name="addressbus_width" value="51"/>
			<!-- McPAT will add the control bus width to the addressbus width automatically -->
			<stat name="memory_accesses" value="127"/>
			<stat name="memory_reads" value="127"/>
			<stat name="memory_writes" value="0"/>
			<!-- McPAT does not track individual mc, instead, it takes the total accesses and calculate 
			the average power per MC or per channel. This is sufficent for most application. 
			Further trackdown can be easily added in later versions. -->
		</component>
		<component id="system.niu" name="niu">
			<param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
			<param name="clockrate" value="350"/>
			<param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
			<param name="number_units" value="0"/> <!-- unlike PCIe and memory controllers, each Ethernet controller only have one port -->
			<stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
			<stat name="total_load_perc" value="0.7"/> <!-- ratio of total achived load to total achivable bandwidth  -->
		</component>
		<component id="system.pcie" name="pcie">
			<!-- On chip PCIe controller, including Phy-->
			<param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
			<param name="withPHY" value="1"/>
			<param name="clockrate" value="350"/>
			<param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
			<param name="number_units" value="0"/>
			<param name="num_channels" value="8"/> <!-- 2 ,4 ,8 ,16 ,32 -->
			<stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
			<stat name="total_load_perc" value="0.7"/> <!-- Percentage of total achived load to total achivable bandwidth  -->
		</component>
		<component id="system.flashc" name="flashc">
			<param name="number_flashcs" value="0"/>
			<param name="type" value="1"/> <!-- 1: low power; 0 high performance -->
			<param name="withPHY" value="1"/>
			<param name="peak_transfer_rate" value="200"/><!--Per controller sustainable reak rate MB/S -->
			<param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
			<stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
			<stat name="total_load_perc" value="0.7"/> <!-- Percentage of total achived load to total achivable bandwidth  -->
		</component>
		<!--**********************************************************************-->
	</component>
</component>